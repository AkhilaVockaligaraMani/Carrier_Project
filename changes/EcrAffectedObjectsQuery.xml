<!--
File: EcrAffectedObjectsQuery.xml

Description:	This InfoEngine query gets an ECR's Affected Objects details.

Input: 	A single ECR number
Output: Details of ECR Affected Objects:	name, number,version,object URL
Output: Details of ECR :	number					
Writen By: Paul Sweet 2011-03-05

Revision History:
2015-04-11 Akhila V Mani for ESR 31701 Affected objects not getting displayed for multiple ECRs

-->

<%@page language="java" session="false"%>
<%@taglib uri="http://www.ptc.com/infoengine/taglib/core" prefix="ie"%>
<%@page import="wt.services.applicationcontext.implementation.ServiceProperties"%>
<%@page import="ext.carrier.wc.cognos.BSSLCStateReportHelper"%>

<!--com.infoengine.delegate.def
@repositoryType com.ptc.windchill
@delegateName ECR_Affected_Objects_Query
@typeId com.ptc.windchill.enterprise.report.ReportTask
@installDelegate true
-->

<!--com.infoengine.soap.rpc.def
Queries for a Particular ECR
{resourceBundle: com.ptc.hulseware.reports.comTycoProjectsRB}
@param java.lang.String ECRNumber the ECR number to query
@return INFOENGINE_GROUP ${out} {columns: java.lang.String obid, java.lang.String number, java.lang.String name, java.lang.String versionInfo.identifier.versionId, java.lang.String objectURL, java.lang.String AffectNumber}
-->
<%
try
{ // begin try, getting ECR affected objects

	// define the cognos properties file
	java.util.Properties properties = ServiceProperties.getServiceProperties("WTServiceProviderFromProperties");

	// get the value of DEBUG from the properties file
	boolean DEBUG = Boolean.valueOf(properties.getProperty("ext.carrier.wc.cognos.reports.DEBUG"));

	// set the ECR input error to false
	boolean error = false;
	String anum="";
	
	// get passed ECR number
	String passedEcrNumber = (String) getParam("ECRNumber","*");
	//String whereclause = "";
	
	if(passedEcrNumber.equals(" ") || passedEcrNumber.equals("*"))
	{ // begin if, check the ECR input for a blank space or *

		// set error equals true
		error = true;

	} // else if, check the ECR input for a blank space or *
	else
	{ // begin else, check each character in string for invalid entries

		for(int i = 0; i < passedEcrNumber.length(); i++)
		{ // begin for, checking character inputs

			char ch = passedEcrNumber.charAt(i);

			if(ch == ' ' || ch == '!' || ch == '@' || ch == '#' || ch == '$' || ch == '%' || ch == '^' || ch == '&' || ch == '*'|| ch == '(' || ch == ')' || ch == '?')
			{ // begin if, current char is a special char, set error to true

				error = true;

			} // end if, current char is a special char, set error to true
			
		} // end for, checking character inputs

	} // begin else, check each character in string for invalid entries
	
	//**************************ESR 31701 *****************
	if(error == false)
	{ // begin if, the ECR input passed input criteria
		String separator = ",";
		StringTokenizer numberTokens = new StringTokenizer(passedEcrNumber, separator);

		if(numberTokens.countTokens() > 0)
		{ // begin if, there are number tokens in the list

			// get the number of number tokens
			int numTokens = numberTokens.countTokens();
	
				Group gTempOut = new Group();
			
				for(int i = 0; i < numTokens; i++)
				{ // begin for, building where clause for multiple ECRs

					// get number
					String number = numberTokens.nextToken().trim();
					
					//Pass each number to the whereclause
					String whereclause = "(number='"+ number +"')";

			if(DEBUG) System.out.println("The numbers where clause is: " + whereclause);

%>
		<!-- Get-Properties webject is used to get system information -->
		<ie:webject name="Get-Properties" type="MGT">
	    	<ie:param name="AUTHORIZATION" data="${@SERVER[]authorization[]}"/>
	    	<ie:param name="ATTRIBUTE" data="wt.federation.ie.VMName"/>
	    	<ie:param name="GROUP_OUT" data="properties"/>
		</ie:webject>
	
		<!-- Query-Objects webject is used to get the ECR information for the passed ECR number. 
			 Input: ECR number
			 Output group = ECR
		-->
		<ie:webject name="Query-Objects" type="OBJ">
	    	<ie:param name="INSTANCE" 		data="${properties[0]wt.federation.ie.VMName[0]}" valueSeparator=";" delim=";"/>
	    	<ie:param name="ATTRIBUTE"		data="obid,name,number" delim=","/>
	    	<ie:param name="TYPE" 			data="wt.change2.WTChangeRequest2"/>
	    	<ie:param name="WHERE"			data="<%=whereclause%>"/>
	    	<ie:param name="SORTBY"			data="number"/>
	    	<ie:param name="GROUP_OUT"		data="ECR"/>
		</ie:webject>

		<!-- Query-Links webject is used to get change activity associated with previous unreleased object.
			Input: previous unreleased object obid
			Output: group previousUnreleasedCA
		-->
		<ie:webject name="Query-Links" type="OBJ">
			<ie:param name="INSTANCE" 		data="${properties[0]wt.federation.ie.VMName[0]}" valueSeparator=";" delim=";"/>
			<ie:param name="ATTRIBUTE" 		data="obid,number,name,versionInfo.identifier.versionId" delim=","/>
			<ie:param name="GROUP_IN" 		data="ECR"/>
			<ie:param name="TYPE"           data="wt.change2.RelevantRequestData2"/>
			<ie:param name="DIRECTION" 		data="theChangeable2"/>
			<ie:param name="GROUP_OUT" 		data="out"/>
		</ie:webject>

		<ie:webject name="Change-Group" type="GRP">
			    <ie:param name="GROUP_IN" data="out" />
			    <ie:param name="RENAME" data="'number'='AffectNumber'"/>
			</ie:webject>

<%
	
		// get the result of the query
		Group gout = getGroup("out");

		for (int j=0; j < gout.getElementCount(); j++ )
		{ // begin for, process each element,affected Objects
	
			// get element at position i
			Element e = gout.getElementAt(j);
	
	    	// initialize object URL
	    	String objectURL = "";
			anum=(String)gout.getAttributeValue(j,"AffectNumber");
	    	try
	    	{ // begin try, getting the object URL
	
	        	objectURL = BSSLCStateReportHelper.getDetailsPageURL((String)gout.getAttributeValue(j,"obid"));
	
	    	} // end try, getting the object URL
	    	catch (java.lang.Exception e2)
	    	{
	        	System.out.println("E2 exception, ERROR: Gettting ECR affected object URL in EcrAffectedObjectsQuery ");
				e2.printStackTrace();
	    	}//End catch block
			
	    	// add attachmentURL to the current element
	    	e.addAtt (new Att ("objectURL",objectURL));
			
			// add Affected object number to the current element
	    	e.addAtt (new Att ("AffectNumber",anum));
			
			// add ECR Number to the current element
			e.addAtt (new Att ("number",number));
		} // end for, process each affected Element
		
		for(int k = 0; k < gout.getElementCount(); k++)
		{ // begin for, copy elements from group out to group temp out
		
			gTempOut.addElement(gout.getElementAt(k));
			
		} // end for, copy elements from group out to group temp out
	
		gout.removeElements();
		for(int m = 0; m < gTempOut.getElementCount(); m++)
		{ // begin for, copy elements from group tempout to group out
		
			gout.addElement(gTempOut.getElementAt(m));
		} //end for copy elements from group tempout to group out
		
	} // end for, building where clause for multiple ECRs
	
  } // end else, there is more than one number passed

// End ESR 31701	
}//end if error false
	
} // end try, getting ECR details
catch (Exception e1)
{ // begin catch, error getting ECR affected objects

	System.out.println("E1 exception caught in ECR Affected Objects Query");
	e1.printStackTrace();

} // end catch, error getting ECR affected objects
%>
<ie:webject name="Return-Groups" type="GRP">
    <ie:param name="GROUP_IN"           data="out"/> 
</ie:webject>